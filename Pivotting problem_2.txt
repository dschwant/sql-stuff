/* PIVOTTING DOESN'T SEEM TO WORK WITH MORE THAN ONE COLUMN IN THE SOURCE FOR THE PIVOT OPERATION*/

/* THIS IS TEST DATA SHOWING A TEST (ID), WHEN IT WAS RUN, AND THE ELAPSE TIME FOR THE TEST.
   THIS DATA ONLY HAS ONE VALUE (ELAPSE) FOR THE NAMED VALUE PAIR OF ID AND START TIME.
*/
DROP TABLE #RAW_DATA_1 
GO
CREATE TABLE #RAW_DATA_1 (ID CHAR(10), START DATETIME, ELAPSE INT)

INSERT INTO #RAW_DATA_1 (ID, START, ELAPSE) 
SELECT 'A','5/4/09 1:13 PM',4 UNION ALL
SELECT 'B','5/4/09 1:14 PM',4 UNION ALL
SELECT 'A','5/4/09 1:14 PM',3 UNION ALL
SELECT 'A','5/4/09 2:15 PM',5 UNION ALL
SELECT 'B','5/4/09 2:11 PM',4 UNION ALL
SELECT 'A','5/4/09 2:18 PM',6 UNION ALL
SELECT 'B','5/4/09 2:34 PM',1 UNION ALL
SELECT 'B','5/4/09 3:21 PM',2 UNION ALL
SELECT 'A','5/4/09 3:12 PM',5 UNION ALL
SELECT 'B','5/4/09 4:45 PM',0 UNION ALL
SELECT 'B','5/4/09 4:56 PM',4 UNION ALL
SELECT 'A','5/4/09 4:11 PM',6;

/* FOR EACH HOUR AND EACH TEST FIND THE AVERAGE TIME AND THE NUMBER OF RUNS */
SELECT SUBSTRING(CONVERT(VARCHAR,START,120),1,13) RUN_HOUR, 
		ID QUERY_TYPE, 
		COUNT(*) CNT,
		AVG(ELAPSE) AVG_ELAPSE
FROM #RAW_DATA_1
GROUP BY SUBSTRING(CONVERT(VARCHAR,START,120),1,13), ID;

/* USE THIS NEW AGREGATED DATA SET THAT HAS *_2_* VALUE COLUMNS IN IT TO PIVOT USING THE COUNT OF THE NUMBER OF RUNS.
   YOU WOULD ESPECT:
RUN_HOUR		A	B
----------------------
2009-05-04 16	1	2
2009-05-04 15	1	1
2009-05-04 14	2	2
2009-05-04 13	2	1
*/
WITH AGGREGATED
	AS (SELECT	SUBSTRING(CONVERT(VARCHAR,START,120),1,13) RUN_HOUR, 
				ID  QUERY_TYPE, 
				COUNT(*) CNT,
				AVG(ELAPSE) AVG_ELAPSE
	   FROM #RAW_DATA_1
	   GROUP BY SUBSTRING(CONVERT(VARCHAR,START,120),1,13),ID)		

SELECT RUN_HOUR, A, B
FROM AGGREGATED
PIVOT (SUM(CNT) FOR QUERY_TYPE IN (A,B)) P
ORDER BY RUN_HOUR DESC;
/* INSTEAD, YOU GET NULLS ON OFFSET ROWS!! TRY PIVOTTIG THE OTHER DIRECTION, YOU WOULD EXPECT: 
QUERY_TYPE	2009-05-04 16	2009-05-04 15	2009-05-04 14	2009-05-04 13
-------------------------------------------------------------------------
B         	2				1				2				1
A         	1				1				2				2
*/
WITH AGGREGATED
	AS (SELECT	SUBSTRING(CONVERT(VARCHAR,START,120),1,13) RUN_HOUR, 
				ID  QUERY_TYPE, 
				COUNT(*) CNT,
				AVG(ELAPSE) AVG_ELAPSE
	   FROM #RAW_DATA_1
	   GROUP BY SUBSTRING(CONVERT(VARCHAR,START,120),1,13),ID)		

SELECT QUERY_TYPE, [2009-05-04 16],[2009-05-04 15],[2009-05-04 14],[2009-05-04 13]
FROM AGGREGATED
PIVOT (SUM(CNT) FOR RUN_HOUR IN ([2009-05-04 16],[2009-05-04 15],[2009-05-04 14],[2009-05-04 13])) P
ORDER BY QUERY_TYPE DESC;

/* BUT YOU GET EVEN MORE UNUSSUAL NULLS AND TOO MANY ROWS. TRY IT AGAIN, WITH THE ORIGINAL PIVOT BUT USE THE AVERAGE ELAPSE INSTEAD OF THE COUNT.*/
WITH AGGREGATED
	AS (SELECT	SUBSTRING(CONVERT(VARCHAR,START,120),1,13) RUN_HOUR, 
				ID  QUERY_TYPE, 
				COUNT(*) CNT,
				AVG(ELAPSE) AVG_ELAPSE
	   FROM #RAW_DATA_1
	   GROUP BY SUBSTRING(CONVERT(VARCHAR,START,120),1,13),ID)		

SELECT RUN_HOUR, A, B
FROM AGGREGATED
PIVOT (AVG(AVG_ELAPSE) FOR QUERY_TYPE IN (A,B)) P
ORDER BY RUN_HOUR DESC;
/* STILL NULLS AND TOO MANY ROWS. SO, DIFFERENT DIRECTIONS OF PIVOT AND DIFFERENT AGGREGATE FUNCTIONS STILL DON'T WORK.
   MAYBE, LET'S TRY IT WITH JUST ONE VALUE COLUMN IN THE SOURCE FOR THE PIVOT (ONLY COUNT AND NOT AVERAGE ALSO) */
SELECT	SUBSTRING(CONVERT(VARCHAR,START,120),1,13) RUN_HOUR, 
		ID QUERY_TYPE, 
		COUNT(*) CNT
FROM #RAW_DATA_1
GROUP BY SUBSTRING(CONVERT(VARCHAR,START,120),1,13),ID;

WITH AGGREGATED
	AS (SELECT SUBSTRING(CONVERT(VARCHAR,START,120),1,13) RUN_HOUR, 
			ID QUERY_TYPE, 
			COUNT(*) CNT
   FROM #RAW_DATA_1
   GROUP BY SUBSTRING(CONVERT(VARCHAR,START,120),1,13), ID)		

SELECT RUN_HOUR, A, B
FROM AGGREGATED
PIVOT (SUM(CNT) FOR QUERY_TYPE IN (A,B)) P
ORDER BY RUN_HOUR DESC;
/* THAT WORKS. HOW ABOUT PIVOTTING THE OTHER WAY, OR USING THE OTHER AGGREGATE? */
WITH AGGREGATED
	AS (SELECT	SUBSTRING(CONVERT(VARCHAR,START,120),1,13) RUN_HOUR, 
				ID  QUERY_TYPE, 
				COUNT(*) CNT
	   FROM #RAW_DATA_1
	   GROUP BY SUBSTRING(CONVERT(VARCHAR,START,120),1,13),ID)		

SELECT QUERY_TYPE, [2009-05-04 16],[2009-05-04 15],[2009-05-04 14],[2009-05-04 13]
FROM AGGREGATED
PIVOT (SUM(CNT) FOR RUN_HOUR IN ([2009-05-04 16],[2009-05-04 15],[2009-05-04 14],[2009-05-04 13])) P
ORDER BY QUERY_TYPE DESC;

WITH AGGREGATED
	AS (SELECT	SUBSTRING(CONVERT(VARCHAR,START,120),1,13) RUN_HOUR, 
				ID  QUERY_TYPE,
				AVG(ELAPSE) AVG_ELAPSE
	   FROM #RAW_DATA_1
	   GROUP BY SUBSTRING(CONVERT(VARCHAR,START,120),1,13),ID)		

SELECT RUN_HOUR, A, B
FROM AGGREGATED
PIVOT (AVG(AVG_ELAPSE) FOR QUERY_TYPE IN (A,B)) P
ORDER BY RUN_HOUR DESC;
/*------------------------------
CONCLUSION: TWO VALUE COLUMNS IN A SOURCE CREATES UNECESSARY EXTRA PIVOTTED ROWS AND NULLS. ONLY ONE COLUMN DOESN'T.
------------------------------*/

/* MAYBE THE PROBLEM IS THAT WE WERE USING A CALCULATED SOURCE (CTE OR AN INLINE SELECT) INSTEAD OF JUST RAW DATA.
   SO, CREATE A TABLE WITH THE RAW INTERMEDIATE DATA (RUN_HOUR, QUERY_TYPE, CNT AND AVG_ELAPSE) AND PIVOT THAT.
   THEN, CREATE A TABLE WITRH ONLY ONE VALUE COLUMN, AND PIVOT THAT. */

DROP TABLE #RAW_DATA_2_VALUES 
GO
CREATE TABLE #RAW_DATA_2_VALUES (RUN_HOUR CHAR(13), QUERY_TYPE CHAR(10), CNT INT, AVG_ELAPSE INT)

INSERT INTO #RAW_DATA_2_VALUES (RUN_HOUR, QUERY_TYPE, CNT, AVG_ELAPSE) 
SELECT '2009-05-04 13','A',2,3 UNION ALL
SELECT '2009-05-04 14','A',2,5 UNION ALL
SELECT '2009-05-04 15','A',1,5 UNION ALL
SELECT '2009-05-04 16','A',1,6 UNION ALL
SELECT '2009-05-04 13','B',1,4 UNION ALL
SELECT '2009-05-04 14','B',2,2 UNION ALL
SELECT '2009-05-04 15','B',1,2 UNION ALL
SELECT '2009-05-04 16','B',2,2

SELECT RUN_HOUR, A, B
FROM #RAW_DATA_2_VALUES
PIVOT (SUM(CNT) FOR QUERY_TYPE IN (A,B)) P
ORDER BY RUN_HOUR DESC

DROP TABLE #RAW_DATA_1_VALUE
GO
CREATE TABLE #RAW_DATA_1_VALUE (RUN_HOUR CHAR(13), QUERY_TYPE CHAR(10), CNT INT)

INSERT INTO #RAW_DATA_1_VALUE (RUN_HOUR, QUERY_TYPE, CNT) 
SELECT '2009-05-04 13','A',2 UNION ALL
SELECT '2009-05-04 14','A',2 UNION ALL
SELECT '2009-05-04 15','A',1 UNION ALL
SELECT '2009-05-04 16','A',1 UNION ALL
SELECT '2009-05-04 13','B',1 UNION ALL
SELECT '2009-05-04 14','B',2 UNION ALL
SELECT '2009-05-04 15','B',1 UNION ALL
SELECT '2009-05-04 16','B',2

SELECT RUN_HOUR, A, B
FROM #RAW_DATA_1_VALUE
PIVOT (SUM(CNT) FOR QUERY_TYPE IN (A,B)) P
ORDER BY RUN_HOUR DESC
/*------------------------------
CONCLUSION: TWO VALUE COLUMNS IN A PIVOT OPERATIONS SOURCE (REGARDLESS OF WHETHER IT IS DIRECTLY FROM A TABLE OR 
 FROM AN INTERMEDIATE OPERATION) CREATES UNECESSARY EXTRA PIVOTTED ROWS AND NULLS. ONLY ONE COLUMN IN A SOURCE DOES NOT DOESN'T.
------------------------------*/

/* MAYBE TWO IS BAD, BUT MORE IS O.K. */
DROP TABLE #RAW_DATA_5_VALUES 
GO
CREATE TABLE #RAW_DATA_5_VALUES (RUN_HOUR CHAR(13), QUERY_TYPE CHAR(10), CNT INT, AVG_ELAPSE INT, THIRD FLOAT, FOURTH NUMERIC, FIFTH DATETIME)

INSERT INTO #RAW_DATA_5_VALUES (RUN_HOUR, QUERY_TYPE, CNT, AVG_ELAPSE, THIRD, FOURTH, FIFTH) 
SELECT '2009-05-04 13','A',2,3,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 14','A',2,5,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 15','A',1,5,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 16','A',1,6,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 13','B',1,4,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 14','B',2,2,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 15','B',1,2,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 16','B',2,2,3.123,45.2,'2010-01-01 01:01:01'

SELECT RUN_HOUR, A, B
FROM #RAW_DATA_5_VALUES
PIVOT (SUM(CNT) FOR QUERY_TYPE IN (A,B)) P
ORDER BY RUN_HOUR DESC

/* MAYBE INT IS BAD, BUT OTHER DATATYPES WORK */
SELECT RUN_HOUR, A, B
FROM #RAW_DATA_5_VALUES
PIVOT (AVG(THIRD) FOR QUERY_TYPE IN (A,B)) P
ORDER BY RUN_HOUR DESC

SELECT RUN_HOUR, A, B
FROM #RAW_DATA_5_VALUES
PIVOT (COUNT(FOURTH) FOR QUERY_TYPE IN (A,B)) P
ORDER BY RUN_HOUR DESC

SELECT RUN_HOUR, A, B
FROM #RAW_DATA_5_VALUES
PIVOT (MAX(FIFTH) FOR QUERY_TYPE IN (A,B)) P
ORDER BY RUN_HOUR DESC

/* NO, STILL UNWANTED ROWS AND NULLS (EXCEPT ON THE COUNT(n) - WHICH IS A POST AGGREGATE FUNCTION).
   WHAT ABOUT IF YOU PIVOT ON MORE THAN ONE AGREGGATE ROW LABEL COLUMN? */

DROP TABLE #RAW_DATA_5_VALUES2 
GO
CREATE TABLE #RAW_DATA_5_VALUES2 (RUN_HOUR CHAR(13), QUERY_TYPE CHAR(10), RUN_SOURCE CHAR(10), CNT INT, AVG_ELAPSE INT, THIRD FLOAT, FOURTH NUMERIC, FIFTH DATETIME)

INSERT INTO #RAW_DATA_5_VALUES2 (RUN_HOUR, QUERY_TYPE, RUN_SOURCE, CNT, AVG_ELAPSE, THIRD, FOURTH, FIFTH) 
SELECT '2009-05-04 13','A','X',2,3,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 13','A','Y',2,3,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 14','A','X',2,5,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 14','A','Y',2,5,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 15','A','X',1,5,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 15','A','Y',1,5,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 16','A','X',1,6,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 13','B','Y',1,4,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 13','B','X',1,4,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 14','B','Y',2,2,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 15','B','X',1,2,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 15','B','Y',1,2,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 16','B','X',2,2,3.123,45.2,'2010-01-01 01:01:01' UNION ALL
SELECT '2009-05-04 16','B','Y',2,2,3.123,45.2,'2010-01-01 01:01:01'

SELECT RUN_HOUR, RUN_SOURCE, A, B
FROM #RAW_DATA_5_VALUES2
PIVOT (AVG(THIRD) FOR QUERY_TYPE IN (A,B)) P
ORDER BY RUN_HOUR DESC

SELECT RUN_HOUR, RUN_SOURCE, A, B
FROM (SELECT RUN_HOUR, QUERY_TYPE, RUN_SOURCE, THIRD FROM #RAW_DATA_5_VALUES2) X
PIVOT (AVG(THIRD) FOR QUERY_TYPE IN (A,B)) P
ORDER BY RUN_HOUR DESC

/* EVEN THAT ONLY WORKS IF THERE IS ONLY ONE VALUE COLUMN IN THE SOURCE OF THE PIVOT */